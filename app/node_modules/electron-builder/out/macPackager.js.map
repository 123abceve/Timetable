{
  "version": 3,
  "file": "macPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/macPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { Platform, OsXBuildOptions } from \"./metadata\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { log, spawn } from \"./util\"\nimport { createKeychain, deleteKeychain, CodeSigningInfo, generateKeychainName, sign } from \"./codeSign\"\nimport { stat } from \"fs-extra-p\"\nimport { path7za } from \"7zip-bin\"\nimport deepAssign = require(\"deep-assign\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport default class MacPackager extends PlatformPackager<OsXBuildOptions> {\n  codeSigningInfo: Promise<CodeSigningInfo>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null) {\n      const keychainName = generateKeychainName()\n      cleanupTasks.push(() => deleteKeychain(keychainName))\n      this.codeSigningInfo = createKeychain(keychainName, this.options.cscLink, this.options.cscKeyPassword, this.options.csaLink)\n    }\n    else {\n      this.codeSigningInfo = BluebirdPromise.resolve(null)\n    }\n  }\n\n  get platform() {\n    return Platform.OSX\n  }\n\n  async pack(outDir: string, appOutDir: string, arch: string): Promise<any> {\n    await super.pack(outDir, appOutDir, arch)\n    const codeSigningInfo = await this.codeSigningInfo\n    await this.signMac(path.join(appOutDir, this.appName + \".app\"), codeSigningInfo)\n  }\n\n  private signMac(distPath: string, codeSigningInfo: CodeSigningInfo): Promise<any> {\n    if (codeSigningInfo == null) {\n      codeSigningInfo = {cscName: this.options.sign || process.env.CSC_NAME}\n    }\n\n    if (codeSigningInfo.cscName == null) {\n      log(\"App is not signed: CSC_LINK or CSC_NAME are not specified\")\n      return BluebirdPromise.resolve()\n    }\n    else {\n      log(\"Signing app\")\n      return sign(distPath, codeSigningInfo)\n    }\n  }\n\n  packageInDistributableFormat(outDir: string, appOutDir: string): Promise<any> {\n    const artifactPath = path.join(appOutDir, `${this.appName}-${this.metadata.version}.dmg`)\n    return BluebirdPromise.all([\n      new BluebirdPromise<any>(async (resolve, reject) => {\n        log(\"Creating DMG\")\n\n        const specification: appdmg.Specification = deepAssign({\n          title: this.appName,\n          icon: path.join(this.buildResourcesDir, \"icon.icns\"),\n          \"icon-size\": 80,\n          contents: [\n            {\n              \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n            },\n            {\n              \"x\": 130, \"y\": 220, \"type\": \"file\"\n            }\n          ]\n        }, this.customBuildOptions)\n\n        if (this.customBuildOptions == null || !(\"background\" in this.customBuildOptions)) {\n          const background = path.join(this.buildResourcesDir, \"background.png\")\n          try {\n            if ((await stat(background)).isFile()) {\n              specification.background = background\n            }\n          }\n          catch (e) {\n            // ignored\n          }\n        }\n\n        specification.contents[1].path = path.join(appOutDir, this.appName + \".app\")\n\n        const emitter = require(\"appdmg\")({\n          target: artifactPath,\n          basepath: this.projectDir,\n          specification: specification\n        })\n        emitter.on(\"error\", reject)\n        emitter.on(\"finish\", () => resolve())\n      })\n        .then(() => this.dispatchArtifactCreated(artifactPath, `${this.metadata.name}-${this.metadata.version}.dmg`)),\n\n      this.zipMacApp(appOutDir)\n        .then(it => this.dispatchArtifactCreated(it, `${this.metadata.name}-${this.metadata.version}-mac.zip`))\n    ])\n  }\n\n  private zipMacApp(outDir: string): Promise<string> {\n    log(\"Creating ZIP for Squirrel.Mac\")\n    // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n    const resultPath = `${this.appName}-${this.metadata.version}-mac.zip`\n    // -y param is important - \"store symbolic links as the link instead of the referenced file\"\n    const args = [\"a\", \"-mm=\" + (this.devMetadata.build.compression === \"store\" ? \"Copy\" : \"Deflate\"), \"-r\", \"-bb0\", \"-bd\"]\n    if (this.devMetadata.build.compression === \"maximum\") {\n      // http://superuser.com/a/742034\n      //noinspection SpellCheckingInspection\n      args.push(\"-mfb=258\", \"-mpass=15\")\n    }\n    args.push(resultPath, this.appName + \".app\")\n\n    return spawn(path7za, args, {\n      cwd: outDir,\n      stdio: [\"ignore\", \"ignore\", \"inherit\"],\n    })\n      .thenReturn(path.join(outDir, resultPath))\n  }\n}"
  ]
}
