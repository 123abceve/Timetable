{
  "version": 3,
  "file": "packager.js",
  "sourceRoot": "",
  "sources": [
    "../src/packager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { accessSync } from \"fs\"\nimport * as path from \"path\"\nimport { DEFAULT_APP_DIR_NAME, installDependencies, log, getElectronVersion, readPackageJson } from \"./util\"\nimport { all, executeFinally } from \"./promise\"\nimport { EventEmitter } from \"events\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { InfoRetriever } from \"./repositoryInfo\"\nimport { AppMetadata, DevMetadata, Platform } from \"./metadata\"\nimport { PackagerOptions, PlatformPackager, BuildInfo, ArtifactCreated, use } from \"./platformPackager\"\nimport MacPackager from \"./macPackager\"\nimport { WinPackager } from \"./winPackager\"\nimport * as errorMessages from \"./errorMessages\"\nimport * as util from \"util\"\nimport deepAssign = require(\"deep-assign\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: Function) {\n  emitter.on(event, handler)\n}\n\nexport class Packager implements BuildInfo {\n  readonly projectDir: string\n  readonly appDir: string\n\n  metadata: AppMetadata\n  devMetadata: DevMetadata\n\n  private isTwoPackageJsonProjectLayoutUsed = true\n\n  electronVersion: string\n\n  readonly eventEmitter = new EventEmitter()\n\n  //noinspection JSUnusedGlobalSymbols\n  constructor(public options: PackagerOptions, public repositoryInfo: InfoRetriever = null) {\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n    this.appDir = this.computeAppDirectory()\n  }\n\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  get devPackageFile(): string {\n    return path.join(this.projectDir, \"package.json\")\n  }\n\n  async build(): Promise<any> {\n    const devPackageFile = this.devPackageFile\n    const appPackageFile = this.projectDir === this.appDir ? devPackageFile : path.join(this.appDir, \"package.json\")\n    const platforms = this.options.platform\n\n    const metadataList = await BluebirdPromise.map(Array.from(new Set([devPackageFile, appPackageFile])), readPackageJson)\n    this.metadata = metadataList[metadataList.length - 1]\n    this.devMetadata = deepAssign(metadataList[0], this.options.devMetadata)\n    this.checkMetadata(appPackageFile, devPackageFile, platforms)\n\n    this.electronVersion = await getElectronVersion(this.devMetadata, devPackageFile)\n\n    const cleanupTasks: Array<() => Promise<any>> = []\n    return executeFinally(this.doBuild(platforms, cleanupTasks), () => all(cleanupTasks.map(it => it())))\n  }\n\n  private async doBuild(platforms: Array<Platform>, cleanupTasks: Array<() => Promise<any>>): Promise<any> {\n    const distTasks: Array<Promise<any>> = []\n    const outDir = path.resolve(this.projectDir, use(this.devMetadata.directories, it => it.output) || \"dist\")\n\n    for (let platform of platforms) {\n      const helper = this.createHelper(platform, cleanupTasks)\n      for (let arch of normalizeArchs(platform, this.options.arch)) {\n        await this.installAppDependencies(arch)\n        // electron-packager uses productName in the directory name\n        const appOutDir = path.join(outDir, `${helper.appName}-${platform.nodeName}-${arch}`)\n        await helper.pack(outDir, appOutDir, arch)\n        if (this.options.dist) {\n          distTasks.push(helper.packageInDistributableFormat(outDir, appOutDir, arch))\n        }\n      }\n    }\n\n    return await BluebirdPromise.all(distTasks)\n  }\n\n  private createHelper(platform: Platform, cleanupTasks: Array<() => Promise<any>>): PlatformPackager<any> {\n    if (this.options.platformPackagerFactory != null) {\n      return this.options.platformPackagerFactory(this,  platform, cleanupTasks)\n    }\n\n    switch (platform) {\n      case Platform.OSX:\n      {\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\n        return new helperClass(this, cleanupTasks)\n      }\n\n      case Platform.WINDOWS:\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\n        return new helperClass(this, cleanupTasks)\n      }\n\n      case Platform.LINUX:\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\n\n      default:\n        throw new Error(\"Unknown platform: \" + platform)\n    }\n  }\n\n  // Auto-detect app/ (two package.json project layout (development and app)) or fallback to use working directory if not explicitly specified\n  private computeAppDirectory(): string {\n    let customAppPath = this.options.appDir\n    let required = true\n    if (customAppPath == null) {\n      customAppPath = DEFAULT_APP_DIR_NAME\n      required = false\n    }\n\n    const absoluteAppPath = path.join(this.projectDir, customAppPath)\n    try {\n      accessSync(absoluteAppPath)\n    }\n    catch (e) {\n      if (required) {\n        throw new Error(customAppPath + \" doesn't exists, \" + e.message)\n      }\n      else {\n        this.isTwoPackageJsonProjectLayoutUsed = false\n        return this.projectDir\n      }\n    }\n    return absoluteAppPath\n  }\n\n  private checkMetadata(appPackageFile: string, devAppPackageFile: string, platforms: Array<Platform>): void {\n    const reportError = (missedFieldName: string) => {\n      throw new Error(\"Please specify '\" + missedFieldName + \"' in the application package.json ('\" + appPackageFile + \"')\")\n    }\n\n    const appMetadata = this.metadata\n    if (appMetadata.name == null) {\n      reportError(\"name\")\n    }\n    else if (appMetadata.description == null) {\n      reportError(\"description\")\n    }\n    else if (appMetadata.version == null) {\n      reportError(\"version\")\n    }\n    else if ((<any>appMetadata) !== this.devMetadata && (<any>appMetadata).build != null) {\n      throw new Error(util.format(errorMessages.buildInAppSpecified, appPackageFile, devAppPackageFile))\n    }\n    else if (this.devMetadata.build == null) {\n      throw new Error(util.format(errorMessages.buildIsMissed, devAppPackageFile))\n    }\n    else {\n      const author = appMetadata.author\n      if (author == null) {\n        reportError(\"author\")\n      }\n      else if (this.options.dist && author.email == null && platforms.includes(Platform.LINUX)) {\n        throw new Error(util.format(errorMessages.authorEmailIsMissed, appPackageFile))\n      }\n    }\n  }\n\n  private installAppDependencies(arch: string): Promise<any> {\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      return installDependencies(this.appDir, this.electronVersion, arch, \"rebuild\")\n    }\n    else {\n      log(\"Skipping app dependencies installation because dev and app dependencies are not separated\")\n      return BluebirdPromise.resolve()\n    }\n  }\n}\n\nexport function normalizeArchs(platform: Platform, arch?: string) {\n  if (platform === Platform.OSX) {\n    return [\"x64\"]\n  }\n  else {\n    return arch == null ? [process.arch] : (arch === \"all\" ? [\"ia32\", \"x64\"] : [arch])\n  }\n}\n\nexport function normalizePlatforms(platforms: Array<string | Platform>): Array<Platform> {\n  if (platforms == null || platforms.length === 0) {\n    return [Platform.fromString(process.platform)]\n  }\n  else if (platforms[0] === \"all\") {\n    if (process.platform === Platform.OSX.nodeName) {\n      return [Platform.OSX, Platform.LINUX, Platform.WINDOWS]\n    }\n    else if (process.platform === Platform.LINUX.nodeName) {\n      // OS X code sign works only on OS X\n      return [Platform.LINUX, Platform.WINDOWS]\n    }\n    else {\n      return [Platform.WINDOWS]\n    }\n  }\n  else {\n    return platforms.map(it => it instanceof Platform ? it : Platform.fromString(it))\n  }\n}\n"
  ]
}
