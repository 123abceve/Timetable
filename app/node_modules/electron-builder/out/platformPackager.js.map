{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { InfoRetriever, ProjectMetadataProvider } from \"./repositoryInfo\"\nimport { AppMetadata, DevMetadata, Platform, PlatformSpecificBuildOptions, getProductName } from \"./metadata\"\nimport EventEmitter = NodeJS.EventEmitter\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport packager = require(\"electron-packager-tf\")\nimport globby = require(\"globby\")\nimport { copy } from \"fs-extra-p\"\nimport { statOrNull } from \"./util\"\nimport { Packager } from \"./packager\"\nimport deepAssign = require(\"deep-assign\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nconst pack = BluebirdPromise.promisify(packager)\n\nexport interface PackagerOptions {\n  arch?: string\n\n  dist?: boolean\n  githubToken?: string\n\n  sign?: string\n\n  platform?: Array<Platform>\n  target?: Array<string>\n\n  appDir?: string\n\n  projectDir?: string\n\n  cscLink?: string\n  csaLink?: string\n  cscKeyPassword?: string\n\n  platformPackagerFactory?: (packager: Packager, platform: Platform, cleanupTasks: Array<() => Promise<any>>) => PlatformPackager<any>\n\n  /**\n   * The same as [development package.json](https://github.com/electron-userland/electron-builder/wiki/Options#development-packagejson).\n   *\n   * Development `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly devMetadata?: DevMetadata\n}\n\nexport interface BuildInfo extends ProjectMetadataProvider {\n  options: PackagerOptions\n\n  devMetadata: DevMetadata\n\n  projectDir: string\n  appDir: string\n\n  electronVersion: string\n\n  repositoryInfo: InfoRetriever\n  eventEmitter: EventEmitter\n}\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> implements ProjectMetadataProvider {\n  protected readonly options: PackagerOptions\n\n  protected readonly projectDir: string\n  protected readonly buildResourcesDir: string\n\n  readonly metadata: AppMetadata\n  readonly devMetadata: DevMetadata\n\n  customBuildOptions: DC\n\n  readonly appName: string\n\n  public abstract get platform(): Platform\n\n  constructor(protected info: BuildInfo) {\n    this.options = info.options\n    this.projectDir = info.projectDir\n    this.metadata = info.metadata\n    this.devMetadata = info.devMetadata\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n\n    this.customBuildOptions = (<any>info.devMetadata.build)[this.platform.buildConfigurationKey]\n\n    this.appName = getProductName(this.metadata, this.devMetadata)\n  }\n\n  protected get relativeBuildResourcesDirname() {\n    return use(this.devMetadata.directories, it => it.buildResources) || \"build\"\n  }\n\n  protected dispatchArtifactCreated(file: string, artifactName?: string) {\n    this.info.eventEmitter.emit(\"artifactCreated\", {\n      file: file,\n      artifactName: artifactName,\n      platform: this.platform,\n    })\n  }\n\n  async pack(outDir: string, appOutDir: string, arch: string): Promise<any> {\n    await this.doPack(outDir, appOutDir, arch)\n    await this.copyExtraResources(appOutDir, arch)\n  }\n\n  protected async doPack(outDir: string, appOutDir: string, arch: string) {\n    const version = this.metadata.version\n    let buildVersion = version\n    const buildNumber = this.computeBuildNumber()\n    if (buildNumber != null) {\n      buildVersion += \".\" + buildNumber\n    }\n\n    checkConflictingOptions(this.devMetadata.build)\n\n    const options = deepAssign({\n      dir: this.info.appDir,\n      out: outDir,\n      name: this.appName,\n      platform: this.platform.nodeName,\n      arch: arch,\n      version: this.info.electronVersion,\n      icon: path.join(this.buildResourcesDir, \"icon\"),\n      asar: true,\n      overwrite: true,\n      \"app-version\": version,\n      \"build-version\": buildVersion,\n      tmpdir: false,\n      \"version-string\": {\n        CompanyName: this.metadata.author.name,\n        FileDescription: this.metadata.description,\n        ProductName: this.appName,\n        InternalName: this.appName,\n      }\n    }, this.devMetadata.build)\n\n    delete options.osx\n    delete options.win\n    delete options.linux\n    // this option only for windows-installer\n    delete options.iconUrl\n\n    await pack(options)\n\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory ${appOutDir} does not exists. Seems like a wrong configuration.`)\n    }\n    else if (!outStat.isDirectory()) {\n      throw new Error(`Output directory ${appOutDir} is a file. Seems like a wrong configuration.`)\n    }\n  }\n\n  protected getExtraResources(arch: string): Promise<Array<string>> {\n    const buildMetadata: any = this.devMetadata.build\n    let extraResources: Array<string> = buildMetadata == null ? null : buildMetadata.extraResources\n\n    const platformSpecificExtraResources = this.customBuildOptions == null ? null : this.customBuildOptions.extraResources\n    if (platformSpecificExtraResources != null) {\n      extraResources = extraResources == null ? platformSpecificExtraResources : extraResources.concat(platformSpecificExtraResources)\n    }\n\n    if (extraResources == null) {\n      return BluebirdPromise.resolve([])\n    }\n\n    const expandedPatterns = extraResources.map(it => it\n      .replace(/\\$\\{arch}/g, arch)\n      .replace(/\\$\\{os}/g, this.platform.buildConfigurationKey))\n    return globby(expandedPatterns, {cwd: this.projectDir})\n  }\n\n  protected async copyExtraResources(appOutDir: string, arch: string): Promise<Array<string>> {\n    let resourcesDir = appOutDir\n    if (this.platform === Platform.OSX) {\n      resourcesDir = path.join(resourcesDir, this.appName + \".app\", \"Contents\", \"Resources\")\n    }\n    return await BluebirdPromise.map(await this.getExtraResources(arch), it => copy(path.join(this.projectDir, it), path.join(resourcesDir, it)))\n  }\n\n  abstract packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any>\n\n  protected async computePackageUrl(): Promise<string> {\n    const url = this.devMetadata.homepage\n    if (url != null) {\n      return url\n    }\n\n    if (this.info.repositoryInfo != null) {\n      const info = await this.info.repositoryInfo.getInfo(this)\n      if (info != null) {\n        return `https://github.com/${info.user}/${info.project}`\n      }\n    }\n    return null\n  }\n\n  protected computeBuildNumber(): string {\n    return this.devMetadata.build[\"build-version\"] || process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (let name of [\"all\", \"out\", \"tmpdir\", \"version\", \"platform\", \"dir\", \"arch\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n}\n\nexport interface ArtifactCreated {\n  readonly file: string\n  readonly artifactName?: string\n\n  readonly platform: Platform\n}\n\nexport function use<T, R>(value: T, task: (it: T) => R): R {\n  return value == null ? null : task(value)\n}"
  ]
}
